options(scipen = 999) # so no numbers appear in annoying scientific notation
nDataPts  <- 20 # 20 farms
rho       <- .8 # Strength of the correlation
intercept <- .0 # How much radiation when there are no zombies?
data <- matrix(0,nDataPts,2) # 20x2 matriz of zeroes
data[ ,2] <- rnorm(nDataPts)^2 # 2nd column will be 20 random numbers
# Above sets the number of zombies. They are normally distributed
data[ ,1] <- (rnorm(nDataPts)*sqrt(1.0-rho^2) + data[ ,2]*rho + intercept)^2
# First column is the radiation levels
# It makes it correlated with number of zombies
# rnorm(nDataPts)*sqrt(1.0-rho^2) <- random noise
# data[ ,2]*rho <- part that is correlated with zombies
# intercept <- baseline
# random noise + correlated data + baseline
data <- as.data.frame(data)
colnames(data) <- c("radiation", "zombies")
par(mfrow = c(1,2))
hist(data$radiation)
hist(data$zombies)
hist(log(data$radiation))
hist(log(data$zombies))
plot(data$zombies, data$radiation)
plot(data$zombies, data$radiation)
# creating a function that takes in parameters and data
getregpred <- function(parms,data) {
# This puts the parameters into the regression equation
getregpred <- parms["b0"] + parms["b1"]*data[ ,2]
# Below enables us to click through the different fits (you will see!)
par(ask=TRUE)
# Below begins an empty plot
plot   (data[ ,2], type="n", las=1, ylim=c(-2,2), xlim=c(-2,2), xlab="X", ylab="Y")
par(ask=FALSE)
# Below adds the data to the plot
points (data[ ,2], data[ ,1], pch=21, bg="gray")
# Below adds the regression line to the plot
lines  (data[ ,2], getregpred, lty="solid")
return(getregpred) # This will return a vector of the regression line
}
# rmsd is a function that takes in parameters and data
rmsd <-function(parms, data1) {
# preds object gets handed the results of getregpred()
# (which is the regression coefficients and slopes)
preds<- getregpred(parms, data1)
# rmsd is the square root of the mean of the squared errors
# rmsd is root mean squared deviation
rmsd<-sqrt(sum((preds-data1[ ,1])^2)/length(preds))
}
# set starting parameters (can be anything we want!)
startParms <- c(.1, .2)
names(startParms) <- c("b1", "b0")
# use optim to minimize the root mean squared deviation
xout <- optim(startParms, rmsd, data1=data)
xout
